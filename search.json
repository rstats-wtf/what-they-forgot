[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What They Forgot to Teach You About R",
    "section": "",
    "text": "1 What They Forgot to Teach You About R",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "What They Forgot to Teach You About R",
    "section": "1.1 About",
    "text": "1.1 About\nThis book focuses on content intrinsically related to the infrastructure surrounding data analysis in R, but does not delve into the data analysis itself.\n\nA holistic workflow provides guidance on project-oriented workflows that address common sources of friction in data analysis.\nPersonal R administration empowers R users to confidently manage their R programming environment.\nAll is Fail showcases functions, options, and RStudio capabilities for debugging code, facilitating more efficient resolution of errant code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "index.html#audience",
    "href": "index.html#audience",
    "title": "What They Forgot to Teach You About R",
    "section": "1.2 Audience",
    "text": "1.2 Audience\nThe target learner for this material:\n\nHas a moderate amount of R and RStudio experience.\nIs largely self-taught.\nSuspects they have drifted into some idiosyncratic habits that may slow them down or make their work products more brittle.\nIs interested in (re)designing their R lifestyle, to be more effective and more self-sufficient.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "index.html#mindset",
    "href": "index.html#mindset",
    "title": "What They Forgot to Teach You About R",
    "section": "1.3 Mindset",
    "text": "1.3 Mindset\n\n\n\n\n\n\nTweet from Greg Wilson (2018)\n\n\n\n(One of the things research programmers struggle with is the transition from exploration to infrastructure, i.e., from “coding to figure out what the problem is” to “I’m building a reusable tool”. Habits from the first are often carried over to the second.) 2/N\n\n\nAs a data analyst grows in their skills, eventually the infrastructure surrounding the analysis will become an important catalyst for the reproducibility and longevity of analysis artifacts. Yet the analyst is unlikely to have benefited from any formal training or mentorship related to these topics, and may find themselves exploring arenas typically associated with other domains like software engineering.\nWith this book, we hope to help you gracefully fall into this gap. Don’t fret over past mistakes, but raise the bar for new work. Small but meaningful incremental changes add up over time, transforming your R quality of life.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "index.html#origin",
    "href": "index.html#origin",
    "title": "What They Forgot to Teach You About R",
    "section": "1.4 Origin",
    "text": "1.4 Origin\nThe initial impetus for creating this book was a two-day hands-on workshop first instructed in 2018. The workshop materials and this book will likely continue to both overlap and diverge in content.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "index.html#workshops",
    "href": "index.html#workshops",
    "title": "What They Forgot to Teach You About R",
    "section": "1.5 Workshops",
    "text": "1.5 Workshops\nUpcoming and past offerings:\n\nposit::conf 2024, Seattle, WA\nposit::conf 2023, Chicago, IL\nrstudio::conf 2022, Oxon Hill, MD\nrstudio::conf 2020, San Francisco, CA\nrstudio::conf 2019, Austin, TX\nWTF Seattle Seattle, WA\nrstudio::conf 2018, San Diego, CA\n\nThe workshops may include substantial components that draw on other materials, such as:\n\nHappy Git and GitHub for the useR\nIterating well with the purrr package\n\npurrr tutorial\nRow-oriented workflows in R with the tidyverse\n\n\nWhat They Forgot to Teach You About R by Jennifer Bryan, Jim Hester, Shannon Pileggi, E. David Aja is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What They Forgot to Teach You About R</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html",
    "href": "source-and-blank-slates.html",
    "title": "2  Saving source and blank slates",
    "section": "",
    "text": "2.1 Save source, not the workspace\nI’m borrowing an analogy used to describe the ethos of cloud computing (history of this meme). Livestock is managed in herds and there is little fuss when individuals are lost or must be sacrificed. A pet, on the other hand, is unique and precious.\nWhy are individual servers disposable in cloud computing? Because they can be destroyed and replaced at any time and you generally have lots of them. Their creation is automated and the result of the work that they do is recorded in a file or other persistent data store.\nI recommend you cultivate a workflow in which you treat R processes (a.k.a. “sessions”) like livestock. Any individual R process and the associated workspace is disposable. Why might this be unappealing? This sounds terrible if your workspace is a pet, i.e. it holds precious objects and you aren’t 100% sure you can reproduce them. This fear is worth designing away, because attachment to your workspace indicates you have a non-reproducible workflow. This is guaranteed to lead to heartache.\nEverything that really matters should be achieved through code that you save.\nAll important objects or figures should be explicitly saved to file, in a granular way. This is in contrast to storing them implicitly or explicitly, as part of an entire workspace, or saving them via the mouse. These recommendations make useful objects readily available for use in other scripts or documents, with the additional assurance that they can be regenerated on-demand. (future link: the API for an analysis)\nSaving code – not workspaces – is incredibly important because it is an absolute requirement for reproducibility. Renouncing .Rdata and restarting R often are not intrinsically important or morally superior behaviours. They are important because they provide constant pressure for you to do the right thing: save the source code needed to create all important artefacts of your analysis.\nBelow we lay out the concrete measures for adopting this workflow.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#save-source-not-the-workspace",
    "href": "source-and-blank-slates.html#save-source-not-the-workspace",
    "title": "2  Saving source and blank slates",
    "section": "",
    "text": "Think of your R processes as livestock, not pets.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#sec-use-an-ide",
    "href": "source-and-blank-slates.html#sec-use-an-ide",
    "title": "2  Saving source and blank slates",
    "section": "2.2 Use an IDE",
    "text": "2.2 Use an IDE\nWhen working with R, save your commands in a .R file, a.k.a. a script, or in .Rmd, a.k.a. an R Markdown document. It doesn’t have to be polished. Just save it!\nAn integrated development environment (IDE) is critical for making this workflow pleasant. Without an IDE, you edit your code in one app, copy one or more lines to the clipboard, then paste that into R, and execute. Over and over. If this is your life, it is very attractive to type code directly in R!\nAny good IDE offers a powerful, R-aware code editor and provides many ways to send your code to a running R process (along with other modern conveniences). This eliminates the temptation to develop code directly in the R Console. Instead, it becomes easier to do the right thing, which is to develop code in a .R or .Rmd file.\nSome popular IDEs:\n\nRStudio: download here or (I recommend) run the Preview version\nEmacs + ESS: https://ess.r-project.org\nvim + Nvim-R: blog post How to Turn Vim Into an IDE for R\nVisual Studio Code: https://code.visualstudio.com/docs/languages/r\n\nSometimes people resist advice because it’s hard to incorporate into their current workflow and dismiss it as something “for experts only”. But this gets the direction of causality backwards: long-time and professional coders don’t do these things because they use an IDE. They use an IDE because it makes it so much easier to follow best practices.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#always-start-r-with-a-blank-slate",
    "href": "source-and-blank-slates.html#always-start-r-with-a-blank-slate",
    "title": "2  Saving source and blank slates",
    "section": "2.3 Always start R with a blank slate",
    "text": "2.3 Always start R with a blank slate\nWhen you quit R, do not save the workspace to an .Rdata file. When you launch, do not reload the workspace from an .Rdata file.\n\nIn RStudio, set this via Tools &gt; Global Options.\n\n\n\n\n\n\nvia R for Data Science\n\n\n\n\nFYI: `usethis::use_blank_slate()` prints a reminder about how to do this.\n\nIf you run R from the shell, launch with R --no-save --no-restore-data. You might want to define an alias in your .bash_profile: alias R='R --no-save --no-restore-data'. Learn more by executing R --help in a shell.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#restart-r-often-during-development",
    "href": "source-and-blank-slates.html#restart-r-often-during-development",
    "title": "2  Saving source and blank slates",
    "section": "2.4 Restart R often during development",
    "text": "2.4 Restart R often during development\n\nHave you tried turning it off and then on again?\n– timeless troubleshooting wisdom, applies to everything\n\nIf you use RStudio, use the menu item Session &gt; Restart R or the associated keyboard shortcut Ctrl+Shift+F10 (Windows and Linux) or Command+Shift+F10 (Mac OS). Additional keyboard shortcuts make it easy to restart development where you left off, i.e. to say “re-run all the code up to HERE”:\n\nIn an R script, use Ctrl+Alt+B (Windows and Linux) or Command+Option+B (Mac OS)\nIn R markdown, use Ctrl+Alt+P (Windows and Linux) or Command+Option+P (Mac OS)\n\nIf you run R from the shell, use Ctrl+D or q() to quit, then restart R.\n\n2.4.1 Pre-emptively handling a FAQ\nNo, there is no R command you can put at the top of a script to restart R before executing the rest of the file.\nNo, this is a not a good reason to build RStudio API hacks into your scripts. We shall not speak of your favorite trick that starts with .rs.api.*.\nYou use a menu or keyboard shortcut to save your code or to re-indent it or run a spell-checker, right? This is how you should approach restarting R periodically during the day. It’s a workflow task. It does not belong in your code.\nWhich brings us to …",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#sec-rm-list-ls",
    "href": "source-and-blank-slates.html#sec-rm-list-ls",
    "title": "2  Saving source and blank slates",
    "section": "2.5 What’s wrong with rm(list = ls())?",
    "text": "2.5 What’s wrong with rm(list = ls())?\nIt’s fairly common to see data analysis scripts that begin with this object-nuking command:\n\nrm(list = ls())\n\nThis is highly suggestive of a non-reproducible workflow.\nThis line is meant to reset things, either to power-cycle the current analysis or to switch from one project to another. But there are better ways to do both:\n\nTo power-cycle the current analysis, restart R! See above.\nTo switch from one project to another, either restart R or, even better, use an IDE with proper support for projects, where each project gets its own R process. See Project-oriented workflow.\n\nThe problem with rm(list = ls()) is that, given the intent, it does not go far enough. All it does is delete user-created objects from the global workspace.\nMany other changes to the R landscape persist invisibly and can have profound effects on subsequent development. Any packages that have ever been attached via library() are still available. Any options that have been set to non-default values remain that way. Working directory is not affected (which is, of course, why we see setwd() so often here too!).\nWhy does this matter? It makes your script vulnerable to hidden dependencies on things you ran in this R process before you executed rm(list = ls()).\n\nYou might use functions from a package without including the necessary library() call. Your collaborator won’t be able to run this script.\nYou might code up an analysis assuming that stringsAsFactors = FALSE but next week, when you have restarted R, everything will inexplicably be broken.\nYou might write paths relative to some random working directory, then be puzzled next month when nothing can be found or results don’t appear where you expect.\n\nThe solution is to write every script assuming it will be run in a fresh R process. The best way to do that is … develop scripts in a fresh R process!\nThere is nothing inherently evil about rm(list = ls()). It’s a red flag, because it is indicative of a non-reproducible workflow. Since it appears to “work” ~90% of the time, it’s very easy to deceive yourself into thinking your script is self-contained, when it is not.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#objects-that-take-a-long-time-to-create",
    "href": "source-and-blank-slates.html#objects-that-take-a-long-time-to-create",
    "title": "2  Saving source and blank slates",
    "section": "2.6 Objects that take a long time to create",
    "text": "2.6 Objects that take a long time to create\nPower-cycling your analysis regularly can be very painful if there are parts that take a long time to execute.\nThis indicates it’s time for a modular approach that breaks the analysis into natural phases, each with an associated script and outputs. (future link: API for an analysis) Isolate each computationally demanding step in its own script and write the precious object to file with saveRDS(my_precious, here(\"results\", \"my_precious.rds\")). Now you can develop scripts to do downstream work that reload the precious object via my_precious &lt;- readRDS(here(\"results\", \"my_precious.rds\")). Breaking an analysis into logical steps, with clear inputs and outputs, is a good idea anyway.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#automated-workflows",
    "href": "source-and-blank-slates.html#automated-workflows",
    "title": "2  Saving source and blank slates",
    "section": "2.7 Automated workflows",
    "text": "2.7 Automated workflows\nVarious approaches exist for automating a workflow, i.e. running a set of scripts in sequence. Many people can get by with low-tech solutions, such as using GNU Make or even writing a pseudo-Makefile in R.\nIf you use one “controller” script to run other R scripts or to render multiple R Markdown documents, it’s a good idea to force the use of a fresh R process for each one. If your controller script is written in R, consider using the callr package to source() or render() each worker script or .Rmd in its own R session.\nThe R package targets is gaining traction as a formal tool for workflow automation (sort of GNU make, but for R):\n\ntargets skips costly runtime for tasks that are already up to date, [and] orchestrates the necessary computation with implicit parallel computing…",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "source-and-blank-slates.html#links-to-other-resources",
    "href": "source-and-blank-slates.html#links-to-other-resources",
    "title": "2  Saving source and blank slates",
    "section": "2.8 Links to other resources",
    "text": "2.8 Links to other resources\nThis page from STAT 545 covers some of the same ground, but aimed at someone quite new to R.\nThe post Project-oriented workflow from the tidyverse blog is an earlier effort to explain why rm(list = ls()) and setwd() indicate a sub-optimal workflow.\n\nThat lead to a lively thread on community.rstudio.com where lots of useRs share their experience and tricks.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Saving source and blank slates</span>"
    ]
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "3  Project-oriented workflow",
    "section": "",
    "text": "3.1 We need to talk about setwd(\"path/that/only/works/on/my/machine\")\nA common response to the working directory problem is to set the working directory at the beginning of each script via setwd(). At the start of STAT 545, we see a lot of student code that looks like this:\nlibrary(ggplot2)\nsetwd(\"/Users/jenny/cuddly_broccoli/verbose_funicular/foofy/data\")\ndf &lt;- read.delim(\"raw_foofy_data.csv\")\np &lt;- ggplot(df, aes(x, y)) + geom_point()\nggsave(\"../figs/foofy_scatterplot.png\")\nThe chance of the setwd() command having the desired effect – making the file paths work – for anyone besides its author is 0%. It’s also unlikely to work for the author one or two years or computers from now. To recreate and perhaps extend this plot, the lucky recipient will need to hand edit one or more paths to reflect where the project has landed on their machine.\nHard-wired, absolute paths, especially when sprinkled throughout the code, make a project brittle. Such code does not travel well across time or space.\nIf, after reading this article, you still decide to use setwd() in your scripts, you should at least be very disciplined about it:\nThe convention about leaving working directory at the top-level of a project is tightly connected to topics in Chapter 4.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#sec-setwd",
    "href": "projects.html#sec-setwd",
    "title": "3  Project-oriented workflow",
    "section": "",
    "text": "Only use setwd() at the very start of a file, i.e. in an obvious and predictable place. If someone has to hand-edit all of these, make it easy for them.\nAlways set working directory to the same thing, namely to the top-level of the project (not a subdirectory). Always build subsequent paths relative to that. Here’s how that looks in the previous example:\n\nsetwd(\"/Users/jenny/cuddly_broccoli/verbose_funicular/foofy\")\n\nlibrary(ggplot2)\ndf &lt;- read.delim(\"data/raw_foofy_data.csv\")\np &lt;- ggplot(df, aes(x, y)) + geom_point()\nggsave(\"figs/foofy_scatterplot.png\")\n\n\n\n\n3.1.1 If you like setwd(), then carry on\nIf you use setwd(\"path/that/only/works/on/my/machine\") and it does not cause you or your collaborators grief, then I am happy for you. Carry on. This was my practice as well for many years.\nBut eventually I admitted that this did cause me grief whenever I moved my files, collaborated on an analysis with a colleague, or got a new computer. Then, as the instructor of STAT545, I started to run other people’s code en masse. Up to 80 students submitted multiple .R and .Rmd files each week, riddled with setwd() calls that required artisanal hand editing by me. This was the straw that broke the camel’s back and made me determined to clearly articulate this problem and some solutions. You can design this particular aggravation out of your life.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#dilemma-and-a-solution",
    "href": "projects.html#dilemma-and-a-solution",
    "title": "3  Project-oriented workflow",
    "section": "3.2 Dilemma and a solution",
    "text": "3.2 Dilemma and a solution\nProblem statement:\n\nWe want to work on project A with R’s working directory set to path/to/projectA and on project B with R’s working directory set to path/to/projectB.\nBut we also want to keep code like setwd(\"path/to/projectA\") out of our .R scripts.\n\nThe lowest-tech solution is to simply set working directory yourself, interactively, at the same time as you restart R, when you switch from project A to project B. Execute setwd(\"path/to/projectA\"), but don’t bake it into your scripts. This works! But it’s aggravating enough that most people go back to using setwd() anyway and/or are reluctant to cycle rapidly between projects.\nI strongly recommend using an IDE that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#sec-work-in-a-project",
    "href": "projects.html#sec-work-in-a-project",
    "title": "3  Project-oriented workflow",
    "section": "3.3 Organize work into projects (colloquial definition)",
    "text": "3.3 Organize work into projects (colloquial definition)\nHere’s what I mean by “work in a project”:\n\nFile system discipline: put all the files related to a single project in a designated folder.\n\nThis applies to data, code, figures, notes, etc.\nDepending on project complexity, you might enforce further organization into subfolders.\nOther common file practices are detailed in API for an analysis and How to name files.\n\nWorking directory intentionality: when working on project A, make sure working directory is set to project A’s folder.\n\nIdeally, this is achieved via the development workflow and tooling, not by baking absolute paths into the code.\n\nFile path discipline: all paths are relative and, by default, relative to the project’s folder.\n\nThese habits are synergistic: you’ll get the biggest payoff if you practice all of them together.\nThese habits guarantee that the project can be moved around on your computer or onto other computers and will still “just work”. I argue that this is the only practical convention that creates reliable, polite behavior across different computers or users and over time. This convention is neither new, nor unique to R.\nIt’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#ide-support-for-projects",
    "href": "projects.html#ide-support-for-projects",
    "title": "3  Project-oriented workflow",
    "section": "3.4 IDE support for projects",
    "text": "3.4 IDE support for projects\nProjects are a common and very attractive feature of many IDEs (Section 2.2)). Again, the practice of organizing work in projects is not prevalent among long-time coders because they use an IDE. It’s the other way around: one of the attractions of an IDE is that it makes it easier to exploit development practices that have proven to be useful across many languages and domains.\nI would say an IDE or workflow supports project-oriented work in R if there’s a way to do these things:\n\nLaunch the IDE in project A:\n\nStarts R.\nSets working directory to the project’s folder.\n\nSwitch a running instance of the IDE from project A to project B:\n\nRestarts R.\nSets working directory to the project’s folder.\nOptional but nice: restores previously open files, i.e. pick up where you left off.\n\nHave project A and project B open for simultaneous work:\n\nEach project gets its own R process, with working directory set appropriately.\nOptional but nice: multiple projects feel like multiple instances of the IDE and you can use a conventional method to switch between them, e.g. Command+Tab (Mac OS) or Alt+Tab (Windows).",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#rstudio-projects",
    "href": "projects.html#rstudio-projects",
    "title": "3  Project-oriented workflow",
    "section": "3.5 RStudio Projects",
    "text": "3.5 RStudio Projects\nThe RStudio IDE has a notion of a (capital “P”) Project, which is a very effective implementation of the (small “p”) projects described above.\nYou can designate a new or existing folder as a Project. All this means is that RStudio leaves a file, e.g., foofy.Rproj, in the folder, which is used to store settings specific to that project. Use File &gt; New Project … to get started.\nDouble-click on a .Rproj file to open a fresh instance of RStudio, with the working directory and file browser pointed at the project folder.\nOnce RStudio is running, you can open an existing Project, switch to another Project, launch a second instance of RStudio in a new or existing Project, and much more, via various menus and keyboard shortcuts (more below).\nHere’s a screenshot of the Mac OS app switcher invoked via Command+Tab, showing multiple simultaneous instances of RStudio.\n\n\n\n\n\n\n\n\n\nThis allows rapid context switching across several projects, such as an R package, teaching material, and a data analysis. There is no danger of crosstalk between the projects: each has its own R process, global workspace, and working directory.\n\n3.5.1 Tricks for opening Projects\nOnce you decide “I want to do some work in Project K”, there are various ways to accelerate the startup process. I’ll review a few going from general and low-tech to more specific.\nHave a dedicated folder for your Projects. I keep the vast majority of my R work in RStudio Projects in the folder ~/rrr/. What I call this folder and where I keep it is not important. The main point is if you have One Main Place for Projects, then you can go there in Finder or File Explorer and drill down to the .Rproj file needed to launch any specific project. You can make the One Main Place more accessible to yourself by putting it in the Finder’s Sidebar (macOS) or in the Navigation Pane (Windows).\nRStudio knows about recently used Projects. Once you are in RStudio, there are several ways to access other Projects you’ve recently worked in. In the upper right corner is a drop-down menu with various Project- and session-related goodies in it.\n\n\n\n\n\n\n\n\n\nUse the “arrow and paper” icon to open a Project in a separate RStudio instance, while also leaving the Project you’re launching it from open. Click on a Project’s name to switch the current RStudio instance from one Project to another. The File menu also offers ways to switch project or open new, additional instances.\nFind and Launch Projects with Alfred. This is a highly specific app recommendation that only works on macOS, but I’m sure other tools have a similar capability on macOS and Windows. I use Alfred, which is a macOS application launcher and general productivity booster, based on a recommendation from Hadley Wickham.\nYou will set an Alfred hotkey (I use Option + Space), similar to macOS Spotlight. The hotkey calls up a search window, where you can summon apps or files. I’ve configured Alfred to search preferentially for .Rproj files here, making it extremely easy to find and launch RStudio Projects. Here’s what happens when I type “tidy”:\n\n\n\n\n\n\n\n\n\nYou can achieve this by “registering” the .Rproj file type with Alfred. Go to Alfred’s Preferences &gt; Features &gt; Default Results &gt; Advanced…. Drag any .Rproj file onto this space and then close.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#other-ways-to-work-with-projects",
    "href": "projects.html#other-ways-to-work-with-projects",
    "title": "3  Project-oriented workflow",
    "section": "3.6 Other ways to work with projects",
    "text": "3.6 Other ways to work with projects\nAspirational placeholder.\nWill hopefully sketch project-friendly workflows that are not RStudio, e.g. Emacs + ESS. They do exist but I am not expert in them and an open to input from those who are. Links to well-developed guides would be best as I don’t want to ingest anything I can’t maintain.\n\n3.6.1 Project-specific shortcuts on Windows\nstill rough\nAfter installing R, you will have a shortcut to Rgui.exe on your desktop and/or somewhere on the Start menu file tree, and perhaps also in the Quick Launch part of the taskbar (Vista and earlier).\nCreate a copy of this shortcut for each project. Right-click the new shortcut, select Properties..., and change the ‘Start in’ field to the folder where the project lives.\nLaunch R in a project by double-clicking its suitably-prepared shortcut.\nSource:\n\nR for Windows FAQ question 2.10 How can I keep workspaces for different projects in different directories?",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "projects.html#links-to-other-resources",
    "href": "projects.html#links-to-other-resources",
    "title": "3  Project-oriented workflow",
    "section": "3.7 Links to other resources",
    "text": "3.7 Links to other resources\nThis page from STAT 545 covers some of the same ground, but aimed at someone quite new to R.\nThe post Project-oriented workflow from the tidyverse blog is an earlier effort to explain why rm(list = ls()) and setwd() indicate a sub-optimal workflow.\n\nThat lead to a lively thread on community.rstudio.com where lots of useRs share their experience and tricks.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project-oriented workflow</span>"
    ]
  },
  {
    "objectID": "practice-safe-paths.html",
    "href": "practice-safe-paths.html",
    "title": "4  Practice safe paths",
    "section": "",
    "text": "4.1 Use projects and the here package\nHow can you avoid setwd() at the top of every script?\nTo continue our example, start R in the foofy directory, wherever that may be. Now the code looks like so:\nlibrary(ggplot2)\nlibrary(here)\n\ndf &lt;- read.delim(here(\"data\", \"raw_foofy_data.csv\"))\np &lt;- ggplot(df, aes(x, y)) + geom_point()\nggsave(here(\"figs\", \"foofy_scatterplot.png\"))\nThis will run, with no edits, for anyone who follows the convention about launching R in the project folder. In fact, it will even work if R’s working directory is anywhere inside the project, i.e. it will work from sub-folders. This plays well with knitr/rmarkdown’s default behavior around working directory and in package development/checking workflows.\nRead up on the here package to learn about more features, such as additional ways to mark the top directory and troubleshooting with dr_here(). I have also written a more detailed paean to this package before.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practice safe paths</span>"
    ]
  },
  {
    "objectID": "practice-safe-paths.html#use-projects-and-the-here-package",
    "href": "practice-safe-paths.html#use-projects-and-the-here-package",
    "title": "4  Practice safe paths",
    "section": "",
    "text": "Organize each logical project into a folder on your computer.\nMake sure the top-level folder advertises itself as such. This can be as simple as having an empty file named .here. Or, if you use RStudio and/or Git, those both leave characteristic files behind that will get the job done.\nUse the here() function from the here package to build the path when you read or write a file. Create paths relative to the top-level directory.\nWhenever you work on this project, launch the R process from the project’s top-level directory. If you launch R from the shell, cd to the correct folder first.",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practice safe paths</span>"
    ]
  },
  {
    "objectID": "naming-files.html",
    "href": "naming-files.html",
    "title": "5  How to name files",
    "section": "",
    "text": "Convert content from these slides https://speakerdeck.com/jennybc/how-to-name-files",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>How to name files</span>"
    ]
  },
  {
    "objectID": "api-for-an-analysis.html",
    "href": "api-for-an-analysis.html",
    "title": "6  API for an analysis",
    "section": "",
    "text": "Prose version of slides 57 - 63 from here:\nhttps://speakerdeck.com/jennybc/zen-and-the-art-of-workflow-maintenance?slide=57",
    "crumbs": [
      "A holistic workflow",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>API for an analysis</span>"
    ]
  },
  {
    "objectID": "r-startup.html",
    "href": "r-startup.html",
    "title": "7  R Startup",
    "section": "",
    "text": "7.1 .Renviron\nThe .Renviron file is most useful for defining sensitive information such as API keys (such as GitHub or twitter) as well as R specific environment variables like the history size (R_HISTSIZE=100000) and default library locations R_LIBS_USER.\nThe .Renviron file contains lists of environment variables to set. This is not R code, it uses a format similar to that used on the command line shell.\nThe easiest way to edit .Renviron is by running usethis::edit_r_environ().\nA simple example of a .Renviron file is:",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R Startup</span>"
    ]
  },
  {
    "objectID": "r-startup.html#renviron",
    "href": "r-startup.html#renviron",
    "title": "7  R Startup",
    "section": "",
    "text": ".Renviron\n\nR_HISTSIZE=100000\nGITHUB_PAT=abc123\nR_LIBS_USER=~/R/%p/%v\n\n\n\n\n\n\n\nNote\n\n\n\nTry the activity usethis::use_course(\"rstd.io/wtf-source-package\")\nto learn how to set a GitHub PAT to your .Renviron and then use it with usethis::use_github() to upload a project to GitHub.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R Startup</span>"
    ]
  },
  {
    "objectID": "r-startup.html#rprofile",
    "href": "r-startup.html#rprofile",
    "title": "7  R Startup",
    "section": "7.2 .Rprofile",
    "text": "7.2 .Rprofile\nThe .Rprofile file contains R code to be run when R starts up. It is run after the .Renviron file is sourced. Typically .Rprofile is located in the users’ home directory (~/.Rprofile), however a different location can be configured by setting the R_PROFILE_USER environment variable.\nThe easiest way to edit .Rprofile is by running usethis::edit_r_profile().\nSome common things people often add to their .RProfile\n\nSet a default CRAN mirror\nWrite a welcome message\nCustomize their R prompt\nChange options, screen width, numeric display\nLoad frequently used packages (but be very careful)\nAliases / shortcuts for frequently used functions\n\n\n7.2.1 Reproducibility\nA good rule of thumb is you should only put things in your .Rprofile that you run interactively in the R terminal. If it ever appears in a R script or R Markdown file it should not be in your .Rprofile.\nIf you set these options in your .Rprofile, then try to run one of your scripts on another system without your .Rprofile it will no longer be reproducible. Some problematic examples are loading packages used in analysis (such as dplyr or ggplot2) or changing default options which change the value of outputs, such as options(stringsAsFactors = FALSE).\nIn addition because the .Rprofile is run by every R process (including those started by R itself) it is important to guard most of the code with interactive(), so it is only run in interactive sessions (sessions you are controlling with a terminal).\nA simple example of a .Rprofile is:\n\n\n.Rprofile\n\noptions(repos = c(CRAN = \"https://cran.rstudio.org\"))\n\nif (interactive()) {\n  options(width = 120)\n}\n\n\n\n\n\n\n\nNote\n\n\n\nTry the activity usethis::use_course(\"rstd.io/wtf-source-package\")\nto learn how to create a .Rprofile with a default CRAN repository and add a startup message to it.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R Startup</span>"
    ]
  },
  {
    "objectID": "r-startup.html#disabling-startup-files",
    "href": "r-startup.html#disabling-startup-files",
    "title": "7  R Startup",
    "section": "7.3 Disabling startup files",
    "text": "7.3 Disabling startup files\nYou can run R without any startup files by using the --vanilla argument when starting R. In RStudio you can do this by checking the option Project Options -&gt; Disable .Rprofile execution on session start / resume. You can also selectively disable only the user or site .Rprofile with --no-init-file and --no-site-file respectively, and disable the environment files with --no-environ.\n\n\n\n\n\n\nWarning\n\n\n\nBoth .Renviron and .Rprofile must end with a newline character. If they do not the last line will be ignored without a warning or error.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R Startup</span>"
    ]
  },
  {
    "objectID": "installing-packages.html",
    "href": "installing-packages.html",
    "title": "8  Installing packages",
    "section": "",
    "text": "8.1 a highly simplified package lifecycle\n%%{init: {\"theme\": \"dark\" } }%%\ngraph TD\nSource -- \"devtools::build()\" --&gt; Bundled\nBundled -- \"devtools::build(binary = TRUE)\"--&gt; Binary \nBinary --\"install.packages()\"--&gt; Installed \nInstalled --\"library()\"--&gt; Loaded\n%%{init: {\"theme\": \"dark\" } }%%\nflowchart TD\nsubgraph dev\n  direction LR\nSource -- \"devtools::build()\" --&gt; Bundled\nBundled -- \"devtools::build(binary = TRUE)\"--&gt; Binary \nend\nsubgraph use\ndirection LR\nBinary --\"install.packages()\"--&gt; Installed \nInstalled --\"library()\"--&gt; Loaded \nend\nR Packages covers these phases of the package lifecycle in much more detail.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "installing-packages.html#binary-packages",
    "href": "installing-packages.html#binary-packages",
    "title": "8  Installing packages",
    "section": "8.2 Binary packages",
    "text": "8.2 Binary packages\n\nwhere to get them\nhow to know you got them",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "installing-packages.html#source-packages",
    "href": "installing-packages.html#source-packages",
    "title": "8  Installing packages",
    "section": "8.3 Source packages",
    "text": "8.3 Source packages\nThe most common type of package you install is a binary package. Packages released on CRAN are built as pre-compiled binaries.\nHowever often it is useful to install packages which do not have a pre-built binary version available. This allows you to install development versions not yet released on CRAN, as well as older versions of released packages. It also lets you build your own packages locally.\nTo install a source package you will need to setup a development environment.\nThere are a few main functions used to install source packages.\n\ndevtools::install_dev() to install the latest development version of a CRAN package. 1\ndevtools::install_github() to install a package directly from GitHub, even if it is not on CRAN.\ndevtools::install_version() to install previously released CRAN versions of a package.\n\nFor example devtools::install_dev(\"dplyr\") will install the development version of dplyr. devtools::install_github(\"jimhester/lookup\") will install Jim’s lookup package (which is not on CRAN), and devtools::install_version(\"readr\", \"1.0.0\") will install readr 1.0.0.\nIt is also possible to fork, clone and work with a package directly then use devtools::install() and devtools::load_all() to work with the package locally like you would with a package you have created yourself.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "installing-packages.html#setting-up-a-development-environment",
    "href": "installing-packages.html#setting-up-a-development-environment",
    "title": "8  Installing packages",
    "section": "8.4 Setting up a development environment",
    "text": "8.4 Setting up a development environment\n\n8.4.1 Windows: system prep\nOn Windows the compiler collection needed for installing packages from source is called Rtools.\nRtools is NOT an R package, so it is not installed with install.packages(). Instead download it from http://cran.r-project.org/bin/windows/Rtools/ and run the installer.\nDuring the Rtools installation you will see a window asking you to “Select Additional Tasks”.\n\nDo not select the box for “Add rtools to system PATH”, devtools and RStudio should put Rtools on the PATH automatically when it is needed.\nDo select the box for “Save version information to registry” (it should be selected by default).\n\n\n\n8.4.2 macOS: system prep\nOn macOS you will need to install the Xcode Command Line Tools, which may already be installed. You can check if they are by running\ndevtools::has_devel()\nIf they are not installed you have a few options.\n\nMinimalist approach (what I do): Install Xcode Command Line Tools. In the shell:\nxcode-select --install\nInstall the current release of full Xcode from the Mac App Store. WAY more stuff than you need but the advantage is App Store convenience.\n\n\n8.4.2.1 What about Homebrew?\nUsers on macOS often install R with homebrew via this formula:\nbrew install r\nUnfortunately, when R is installed in this way it is not compatible with the CRAN package binaries, which means you must build and install all packages from source. This takes additional time during installation and can lead to more time spent dealing with installation issues if a package fails to compile.\nInstead, if you prefer the convenience of homebrew, we recommend installing the r cask. NOTE: the cask used to be named r-app but the -app suffix was dropped due to a homebrew policy change around 2019-03-11.\nbrew install --cask r\nThis will install the CRAN R distribution, so all package binaries will be available just like they would be from installing R manually.\n\n\n\n8.4.3 Linux system prep\nMost Linux systems will typically be equipped with the necessary tools for building packages from source. The system package manager (e.g. apt, yum, zypper, etc.) can be used to install tools if they are missing.\n\n\n8.4.4 Verify system prep\ndevtools::has_devel()\nIf this function runs without error then congratulations, your R installation is properly set up!\n\n\n8.4.5 What about Conda?\nSome users use conda in python contexts and notice that conda now also provides (some) R package binaries.\nHowever we would suggest avoiding conda at this time, only a limited number of all CRAN packages are available 2 and many users run into installation problems trying to use install.packages() inside conda environments. Using install.packages() also means you no longer declare all dependencies in the same location. Which means your work is less reproducible than if you always install only conda packages.\nFor these reasons we suggest you either restrict yourself only to packages available as official conda packages, or avoid using conda for R.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "installing-packages.html#installation-to-a-temporary-library",
    "href": "installing-packages.html#installation-to-a-temporary-library",
    "title": "8  Installing packages",
    "section": "8.5 Installation to a temporary library",
    "text": "8.5 Installation to a temporary library\nIt is sometimes useful to install packages to a temporary library, so that they don’t affect your normal packages. This can be done by using the lib argument to the devtools install functions, then using lib.loc in library() when you load the package.\nlibrary(devtools)\n\ntmp_lib &lt;- \"~/tmp/tmp_library\"\ndir.create(tmp_lib)\n\ndevtools::install_github(\"dill/beyonce\", lib = tmp_lib)\n\n## restart R\n\n## explicitly load the affected packages from the temporary library\nlibrary(beyonce, lib.loc = tmp_lib)\n\n## your experimentation goes here\n\n## done? clean up!\nunlink(tmp_lib, recursive = TRUE)\n\n\n\n\n\n\nNote\n\n\n\nTry the activity: usethis::use_course(\"rstd.io/wtf-source-package\")\nTo practice installing various types of source packages.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "installing-packages.html#footnotes",
    "href": "installing-packages.html#footnotes",
    "title": "8  Installing packages",
    "section": "",
    "text": "This will only work if the package includes a link to the development location in the package DESCRIPTION↩︎\n~1,500 out of ~13,000 as of this writing↩︎",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing packages</span>"
    ]
  },
  {
    "objectID": "reproducible-environments.html",
    "href": "reproducible-environments.html",
    "title": "9  Reproducible Environments",
    "section": "",
    "text": "9.1 posit package manager\nPosit Public Package Manager, or P3M",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reproducible Environments</span>"
    ]
  },
  {
    "objectID": "reproducible-environments.html#renv",
    "href": "reproducible-environments.html#renv",
    "title": "9  Reproducible Environments",
    "section": "9.2 renv",
    "text": "9.2 renv\nhttps://rstudio.github.io/renv/",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reproducible Environments</span>"
    ]
  },
  {
    "objectID": "installing-r.html",
    "href": "installing-r.html",
    "title": "10  Installing R",
    "section": "",
    "text": "10.1 rig\nhttps://github.com/r-lib/rig",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Installing R</span>"
    ]
  },
  {
    "objectID": "maintaining-r.html",
    "href": "maintaining-r.html",
    "title": "11  Maintaining R",
    "section": "",
    "text": "11.1 How to upgrade an installed package to the latest version.\nSometimes you would like to upgrade a particular package to the latest available version. Often this is because you have heard about a new feature, or maybe you have run into a bug that may have been fixed.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Maintaining R</span>"
    ]
  },
  {
    "objectID": "maintaining-r.html#how-to-upgrade-an-installed-package-to-the-latest-version.",
    "href": "maintaining-r.html#how-to-upgrade-an-installed-package-to-the-latest-version.",
    "title": "11  Maintaining R",
    "section": "",
    "text": "11.1.1 In RStudio\n\n\n\nRStudio has an update dialog (Packages Tab -&gt; Update). Check packages to update them\n\n\n\n\n11.1.2 R terminal\nDevtools has a function update_packages() which will upgrade a package (from the same source) for any CRAN or development package.\ndevtools::update_packages(\"pkgname\")\nIn addition if the given package is not already installed it will install it.",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Maintaining R</span>"
    ]
  },
  {
    "objectID": "maintaining-r.html#how-to-upgrade-all-out-of-date-packages",
    "href": "maintaining-r.html#how-to-upgrade-all-out-of-date-packages",
    "title": "11  Maintaining R",
    "section": "11.2 How to upgrade all out-of-date packages",
    "text": "11.2 How to upgrade all out-of-date packages\n\n11.2.1 In RStudio\n\n\n\nRStudio also allows you to update all packages (Packages Tab -&gt; Update -&gt; Select All)\n\n\n\n\n11.2.2 CRAN packages\ndevtools::update_packages(TRUE)",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Maintaining R</span>"
    ]
  },
  {
    "objectID": "maintaining-r.html#how-to-downgrade-a-package",
    "href": "maintaining-r.html#how-to-downgrade-a-package",
    "title": "11  Maintaining R",
    "section": "11.3 How to downgrade a package",
    "text": "11.3 How to downgrade a package\nFirst if unsure what version -&gt; CRAN page -&gt; pkgname archive\ndevtools::install_version(\"devtools\", \"1.13.3\")",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Maintaining R</span>"
    ]
  },
  {
    "objectID": "maintaining-r.html#how-to-transfer-your-library-when-updating-r",
    "href": "maintaining-r.html#how-to-transfer-your-library-when-updating-r",
    "title": "11  Maintaining R",
    "section": "11.4 How to transfer your library when updating R",
    "text": "11.4 How to transfer your library when updating R\nOften you will not need to do anything when updating R. For ‘patch’ R versions, the ‘z’ in ‘x.y.z’ the R core developers ensure package compatibility across versions. So if you are updating from R 3.5.0 to R 3.5.1 you can use the same packages you are currently using.\nFor ‘minor’ version changes, the ‘y’ in ‘x.y.z’ the package interface can change, so packages need to be re-installed.\n\n\n\n\n\n\nWarning\n\n\n\nYou may see some suggestions that you can just copy your packages even when the ‘minor’ version changes. DO NOT DO THIS. While it may work some (even most) of the time, R-core does not guarantee compatibility between these versions and things could break (even break silently).\n\n\nI suggest you keep R’s base and recommended packages separate from the other packages you install from CRAN or elsewhere. This makes it easy to re-install R if needed, without touching your CRAN packages. You also want to make sure the package library is specific to the minor version of R. R_LIBS_USER is actually set by default to this scheme:\n\nWindows, R &lt; 4.2: ~/R/win-library/x.y\nWindows, R &gt;= 4.2: ~/AppData/Local/R/win-library/x.y\nmacOS: ~/Library/R/x.y/library\n\nNote, however, that this directory does not necessarily exist and will not necessarily be created automatically. Therefore, to adopt this lifestyle next time you upgrade R, make sure that this directory exists before you start to re-install your add-on packages (fs::dir_create(Sys.getenv(\"R_LIBS_USER\"))).\nYou can also alternatively set R_LIBS_USER to a different path; but make sure to include the %v wildcard. e.g. ~/R/library/%v. The %v is automatically expanded to the major and minor version of R, so with R 3.5.1 this path becomes ~/R/library/3.5. See Renviron for how to edit your .Renviron file.\n\n\n\n\n\n\nWarning\n\n\n\nPaths in R_LIBS_USER are only used if the directories they specify actually exist. So in addition to adding R_LIBS_USER to your .Renviron you need to create the directory as well.\n\n\nOnce this is setup, the process for transferring your package library becomes. (assumes R_LIBS_USER is set to ~/Library/R/3.5/library).\n# Install new version of R (lets say 3.5.0 in this example)\n\n# Create a new directory for the version of R\nfs::dir_create(\"~/Library/R/3.5/library\")\n\n# Re-start R so the .libPaths are updated\n\n# Lookup what packages were in your old package library\npkgs &lt;- fs::path_file(fs::dir_ls(\"~/Library/R/3.4/library\"))\n\n# Filter these packages as needed\n\n# Install the packages in the new version\ninstall.packages(pkgs)",
    "crumbs": [
      "Personal R Administration",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Maintaining R</span>"
    ]
  },
  {
    "objectID": "debugging-r.html",
    "href": "debugging-r.html",
    "title": "12  Debugging R code",
    "section": "",
    "text": "12.1 Debugging your own code\nThe most common case you will run into a bug is when writing new code yourself. Often the mistake is obvious and easily fixed, but sometimes it only appears after multiple levels of calls and is harder to diagnose. There are a few common strategies to use when debugging your own code.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Debugging R code</span>"
    ]
  },
  {
    "objectID": "debugging-r.html#debugging-your-own-code",
    "href": "debugging-r.html#debugging-your-own-code",
    "title": "12  Debugging R code",
    "section": "",
    "text": "Use traceback() to determine where a given error is occurring.\nOutput diagnostic information in code with print(), cat() or message() statements.\nUse browser() to open an interactive debugger before the error\nUse debug() to automatically open a debugger at the start of a function call.\nUse trace() to start a debugger at a location inside a function.\n\n\n12.1.1 traceback()\nThe traceback() function can be used to print a summary of how your program arrived at the error. This is also called a call stack, stack trace or backtrace.\nIn R this gives you each call that lead up to the error, which can be very useful for determining what lead to the error.\nYou can use traceback() in two different ways, either by calling it immediately after the error has occurred.\n\n\nf &lt;- function(x) x + 1\ng &lt;- function(x) f(x)\ng(\"a\")\n\n#&gt; Error in x + 1 : non-numeric argument to binary operator\ntraceback()\n#&gt; 2: f(x) at #1\n#&gt; 1: g(\"a\")\nOr by using traceback() as an error handler, which will call it immediately on any error. (You could even put this in your .Rprofile)\n\noptions(error = traceback)\ng(\"a\")\n\n#&gt; Error in x + 1 : non-numeric argument to binary operator\n#&gt; 2: f(x) at #1\n#&gt; 1: g(\"a\")\n\n\n12.1.2 print()\nOnce you know where an error occurs it is then helpful to know why. Often errors occur because functions are given inputs their authors did not expect, so it is useful to print the value of objects during execution.\nThe most basic way to do this is to sprinkle messages throughout your code, with print() or str(). str() is often more useful because it gives more detail into the exact structure of an object, which may not be the structure you expect it to be.\nThe main downsides to the print approach is you often have to add them in multiple places to narrow down the error, and you cannot further investigate the object.\n\n\n12.1.3 browser()\nA more sophisticated debugging method is to put a call to browser() in your code. This will stop execution at that point and open R’s interactive debugger. In the debugger you can run any R command to look at objects in the current environment, modify them and continue executing.\nSome useful things to do are\n\nUse ls() to determine what objects are available in the current environment. This allows you to see exactly what things you can examine.\nUse str(), print() etc. to examine the objects\nUse n to evaluate the next statement. Use s to evaluate the next statement, but step into function calls.\nUse where to print a stack trace\nUse c to leave the debugger and continue execution\nUse Q to exit the debugger and return to the R prompt.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Debugging R code</span>"
    ]
  },
  {
    "objectID": "debugging-r.html#debugging-in-rstudio",
    "href": "debugging-r.html#debugging-in-rstudio",
    "title": "12  Debugging R code",
    "section": "12.2 Debugging in RStudio",
    "text": "12.2 Debugging in RStudio\n\n12.2.1 Editor breakpoints\nRStudio provides some additional tooling for debugging over using R on the command line. First you can set an editor breakpoint by clicking to the left of the line number in the source file, or by pressing Shift+F9 with your cursor on the line. A breakpoint is equivalent to a browser() call, but you avoid needing to change your code like browser().\n\n\n\n12.2.2 Stopping on error\nIf you are trying to hunt down a particular error it is often useful to have RStudio enter the debugger when it occurs. You can control the error behavior with (Debug -&gt; On Error -&gt; Error Inspector).\n\n\n\n12.2.3 Debugging console\n\nThe RStudio debugging console has a few buttons to make debugging a little nicer, From left to right they are, next (equivalent to n), step info (s), continue (c) and Stop (Q).",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Debugging R code</span>"
    ]
  },
  {
    "objectID": "debugging-r.html#debugging-others-code",
    "href": "debugging-r.html#debugging-others-code",
    "title": "12  Debugging R code",
    "section": "12.3 Debugging others’ code",
    "text": "12.3 Debugging others’ code\nWhen the error is occurring outside of your own code it is also useful to be able to debug the code. In this case you could download the package code locally and debug it like you would with your own code above by adding print() and / or browser() calls. Because R and most R packages are open source this is a perfectly viable option and one I often do myself. However depending on the package this can sometimes be challenging, particularly for those packages which come with R itself.\nThe other option is to use additional functions which allow you to start a browser in existing functions, recover(), debug(), trace() .\n\n12.3.1 recover()\nrecover() is not used directly, instead it is used as an error handler, by calling options(error = recover). You can also use other functions, such as browser() as an error handler, which will start the debugger automatically when there is an error.\nThe benefit to recover() over using options(error = browser) is that you can browse on any of the call stack, not just where the error occurred. Often the issue is most easily diagnosed in calls higher on the stack than immediately where the error occurred.\nWhen recover() is called it prints a list of the current calls, with a prompt to select which you want to browse in. Then a debugging session is started at that location.\n\n\n\n\n\n\nNote\n\n\n\nTry activity 1 usethis::use_course(\"rstd.io/wtf-debugging\") Try activity 2 usethis::use_course(\"rstd.io/wtf-debugging\")\nto practice debugging errors using the tools described\n\n\n\n\n12.3.2 debug()\nIf you have control of the code (because you are the one writing it), using browser() is generally the most convenient way to enter the debugger. However if the error is occurring in code in a package what options do you have?\nThis is where the debug() function is useful, it will open the R debugger on any function, including those in packages.\ndebug(ggplot2::ggplot)\nUse can use the :: syntax to find ‘exported’ functions in a package, but there is also a way to access any function, including un-exported ones, :::.\ndebug(ggplot2:::set_last_plot)\nundebug() is used to remove the debugging code.\n\n\n12.3.3 trace()\ndebug() is very useful, but one drawback is it always executes the first time a function is called. What can you do if the bug only happens the 100th time a function is called?\ntrace() is a more flexible version of debug() that not only lets you start a debugger at the start of a function, it lets you insert any code at any location in a function. The downside to this power and flexibility is that trace() is comparatively harder to use than debug().\nIf called with no additional arguments trace() simply prints a message when the function is entered.\nIf called with a function as the second argument this inserts the function at the start of the function. trace(fun, browser) is functionally equivalent to debug(fun). browser() or recover() are generally the most useful functions to use, but this could actually be any R function or even regular R expressions. This is often useful to open the debugger only when a certain condition is met.\n\ntrace(print, quote(if (is.numeric(x) && x &gt;= 3) cat(\"hi\\n\")), print = FALSE)\n\nTracing function \"print\" in package \"base\"\n\n\n[1] \"print\"\n\nprint(1)\n\n[1] 1\n\nprint(3)\n\nhi\n[1] 3\n\n# Use untrace to remove the tracing code\nuntrace(print)\n\nUntracing function \"print\" in package \"base\"\n\n\nYou can also use the at argument to trace() to insert the tracing expressions at other points in the function body. To determine the number of the expression to insert convert the body of the function to a list. e.g. as.list(body(fun)).\n\n\n\n\n\n\nNote\n\n\n\nTry activity 3 usethis::use_course(\"rstd.io/wtf-debugging\")\nto explore using trace() with at.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Debugging R code</span>"
    ]
  },
  {
    "objectID": "debugging-r.html#debugging-in-r-markdown-documents",
    "href": "debugging-r.html#debugging-in-r-markdown-documents",
    "title": "12  Debugging R code",
    "section": "12.4 Debugging in R Markdown documents",
    "text": "12.4 Debugging in R Markdown documents\nOne special case where it can sometimes be more difficult to debug is an error that occurs only when knitting an R Markdown document.\nThe easiest way to debug most of the errors is to simply run the code inside the chunk as regular R code in the console and use the normal techniques such as inserting browser() calls.\nHowever rarely an error will only occur when the code is being knitted. In this case you can set an error handler with the following code.\nFirst you will need to modify recover slightly, by adding a sink() call to the beginning, which disables the sink used by knitr internally. We do this by using trace(). This can be run in a setup block or in your R console before calling knitr::knit() / rmarkdown::render()\ntrace(recover, sink)\nThen add the following knitr chunk options to the chunk which is failing. error = FALSE, R.options = list(error = recover).\nThen knit the file on the R console with knitr::knit() or rmarkdown::render(). The traceback will contain all of the knitr calls as well, so you will need to look near the end to find the calls in your code.\n\n\n\n\n\n\nWarning\n\n\n\nNote you cannot use the ‘Knit’ button in RStudio when trying to debug R Markdown documents in any case. The ‘Knit’ button opens a separate R process, so there is no way to use an interactive debugger in that case.\n\n\n\n12.4.1 Resources\n\nDebugging techniques in RStudio - Amanda Gadrow’s talk at rstudio::conf 2018\nDebugging in RStudio article",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Debugging R code</span>"
    ]
  },
  {
    "objectID": "read-source.html",
    "href": "read-source.html",
    "title": "13  Read the source",
    "section": "",
    "text": "13.1 GitHub search\nGitHub allows you to search code, repositories, and issues which can often reveal useful insights into problems.\nDoing a generic search is often fruitful, but you can often get more pertinent results with a more targeted approach.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read the source</span>"
    ]
  },
  {
    "objectID": "read-source.html#where-things-exist-in-the-r-source",
    "href": "read-source.html#where-things-exist-in-the-r-source",
    "title": "13  Read the source",
    "section": "13.2 Where things exist in the R source",
    "text": "13.2 Where things exist in the R source\nThe SVN repository used by the R core team to develop R is mirrored on GitHub by Winston Chang at https://github.com/wch/r-source. This means that all the code used by your local R session (including compiled code) is searchable.\nThe R source uses a complicated layout and contains the source of all the code in base R (src/main) as well as the set of packages included in base R, such as stats, graphics, utils and others (src/library/*). It also contains all of the documentation included in R including Writing R extensions, R internals and R admin guides (doc/manual).\n\n\n\n\n\n\nNote\n\n\n\nTry the activity usethis::use_course(\"rstd.io/wtf-read-source\")\nto search the R source for code and documentation.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read the source</span>"
    ]
  },
  {
    "objectID": "read-source.html#where-things-exist-in-cran-packages",
    "href": "read-source.html#where-things-exist-in-cran-packages",
    "title": "13  Read the source",
    "section": "13.3 Where things exist in CRAN packages",
    "text": "13.3 Where things exist in CRAN packages\nYou can find the development home of most R packages by looking at the URL field in the package DESCRIPTION, as can be seen on the CRAN landing page (e.g. devtools landing page). The BugReports field will give you a direct link to the issue page where you should report any issues found with the package.\nIn addition all code for CRAN packages is mirrored on GitHub by Gábor Csárdi at https://github.com/cran, which means all the code for CRAN packages is also searchable.\nAll R code in packages is kept in R/. In addition if the package is using roxygen the source code will also contain roxygen comments (#') with the function level documentation.\nIf a package is not using roxygen (often older packages or those in base R) the documentation will be in .Rd files in the man/ directory. (These files also exist in roxygen packages, but are generated automatically and should not be edited by hand).\nIf the package uses compiled code it will be in src/ regardless of what language the compiled code is written in.\nLong-form documentation in the form of vignettes are stored in vignettes/.\n\n\n\n\n\n\nNote\n\n\n\nTry the activity usethis::use_course(\"rstd.io/wtf-read-source\")\nto search and find source code and documentation in CRAN packages.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Read the source</span>"
    ]
  },
  {
    "objectID": "reprexing.html",
    "href": "reprexing.html",
    "title": "14  Reproduce the problem",
    "section": "",
    "text": "Before you seek outside help, strive to nail down your problem with this level of rigor:\n\nYou can reliably induce it, with minimal setup and fuss. To the point where others can reproduce it.\n\nDiscuss “bisect” as a useful mentality, applied to lines of code / functions or across versions.\nLink out to reprex stuff re: mechanics of sharing.",
    "crumbs": [
      "All is Fail",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Reproduce the problem</span>"
    ]
  },
  {
    "objectID": "sessioninfo.html",
    "href": "sessioninfo.html",
    "title": "Session info",
    "section": "",
    "text": "git2r::repository()\n\nLocal:    main /home/runner/work/what-they-forgot/what-they-forgot\nRemote:   main @ origin (https://github.com/rstats-wtf/what-they-forgot)\nHead:     [2c6cff3] 2024-08-10: rmd &gt;&gt; description\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       UTC\n date     2024-10-05\n pandoc   2.9.2.1 @ /usr/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.3   2024-06-21 [1] RSPM\n digest        0.6.37  2024-08-19 [1] RSPM\n evaluate      1.0.0   2024-09-17 [1] RSPM\n fastmap       1.2.0   2024-05-15 [1] RSPM\n git2r         0.33.0  2023-11-26 [1] RSPM\n htmltools     0.5.8.1 2024-04-04 [1] RSPM\n jsonlite      1.8.9   2024-09-20 [1] RSPM\n knitr         1.48    2024-07-07 [1] RSPM\n rlang         1.1.4   2024-06-04 [1] RSPM\n rmarkdown     2.28    2024-08-17 [1] RSPM\n sessioninfo   1.2.2   2021-12-06 [1] RSPM\n xfun          0.48    2024-10-03 [1] RSPM\n\n [1] /home/runner/work/_temp/Library\n [2] /opt/R/4.4.1/lib/R/site-library\n [3] /opt/R/4.4.1/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Session info"
    ]
  },
  {
    "objectID": "personal-radmin.html",
    "href": "personal-radmin.html",
    "title": "Personal R Administration",
    "section": "",
    "text": "The Project Onion\nGoing all in on the project-oriented workflow means adopting tools that make it possible to programmatically manage each of the layers of project setup, which can be visualized via the “project onion”:",
    "crumbs": [
      "Personal R Administration"
    ]
  },
  {
    "objectID": "personal-radmin.html#the-project-onion",
    "href": "personal-radmin.html#the-project-onion",
    "title": "Personal R Administration",
    "section": "",
    "text": "the project onion\n\n\n\npackage managers\n\n\nlanguage manager\n\n\nlanguage version\n\n\nenvironment manager\n\n\nyour project",
    "crumbs": [
      "Personal R Administration"
    ]
  },
  {
    "objectID": "personal-radmin.html#the-project-onion-r",
    "href": "personal-radmin.html#the-project-onion-r",
    "title": "Personal R Administration",
    "section": "The Project Onion: R",
    "text": "The Project Onion: R\n\n\n\nthe project onion, R",
    "crumbs": [
      "Personal R Administration"
    ]
  },
  {
    "objectID": "personal-radmin.html#the-workflow-cycle",
    "href": "personal-radmin.html#the-workflow-cycle",
    "title": "Personal R Administration",
    "section": "The Workflow Cycle",
    "text": "The Workflow Cycle\n\n\n\n\n\nflowchart LR\n\nstart(starting R)\npackages(installing R packages)\nrepro(creating reproducible environments)\ninstalling(\"installing | upgrading R\")\n\nstart --&gt; packages --&gt; repro --&gt; installing --&gt; start\n\n\n\n\n\n\nIf you go all in on the project-oriented workflow, installing R and upgrading R are the same operation.",
    "crumbs": [
      "Personal R Administration"
    ]
  }
]