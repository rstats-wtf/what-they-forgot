---
title: "Meta Project-Oriented Workflow"
---

The goal of these chapters is to help you build a system for answering questions like:

- How do I upgrade the version of R I'm using for this project?
- How do I track which package versions I'm using for this project?
- How do I move this project from one computer to another?

across many projects and many computers.

This system takes the principles articulated in "Holistic Workflow" and extends them to all the ways you might use R, but also to other software you use.

## The Project Onion

Going all in on the project-oriented workflow means adopting tools that make it possible to programmatically manage each of the layers of project setup, which can be visualized via the "project onion":

![the project onion](./img/project-onion.svg "package managers install language managers install language verions which install environments")

### test environments

a way to test changes to your environment without wrecking your machine:

::: panel-tabset

#### {{< fa brands windows >}}

[Windows Sandbox](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)

#### {{< fa brands apple >}}

- [UTM](https://mac.getutm.app/)
- [Tart](https://github.com/cirruslabs/tart)

#### {{< fa brands linux >}}

- [Docker](https://www.docker.com/)
- [Multipass](https://multipass.run/)
- [Digital Ocean](https://www.digitalocean.com/) | [Linode](https://www.linode.com/) | [Hetzner](https://www.hetzner.com/)

:::

### package managers

::: panel-tabset

#### {{< fa brands windows >}}

- [scoop](https://scoop.sh/)
- [winget](https://learn.microsoft.com/en-us/windows/package-manager/winget/)

#### {{< fa brands apple >}}

- [homebrew](https://brew.sh/)

#### {{< fa brands linux >}}

- [homebrew](https://docs.brew.sh/Homebrew-on-Linux)
- [apt](https://wiki.debian.org/Apt) | [dnf](https://docs.fedoraproject.org/en-US/quick-docs/dnf/)

:::

## The Project Onion: R

![the project onion, R](./img/r-project-onion.svg "scoop install rig; rig install 4.3.0; rig rstudio projects/myproject/renv.lock")

### language manager

::: panel-tabset

#### {{< fa brands windows >}}

```bash
scoop bucket add r-bucket https://github.com/cderv/r-bucket.git
scoop install rig
scoop install rtools
```
or  

```bash
winget install posit.rig
winget install Rtools
```

#### {{< fa brands apple >}}

```
brew tap r-lib/rig
brew install --cask rig
```


#### {{< fa brands linux >}}

```
curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-$(arch)-latest.tar.gz |
  `which sudo` tar xz -C /usr/local
```

:::

### language version

```bash
rig add release
rig add devel
rig add 3.6.2
```

### environment manager

```r
renv::init()
renv::snapshot()
```

### your project

```
renv.lock
my_project.Rproj
```

## The Workflow Cycle

```{mermaid}
flowchart LR

start(starting R)
packages(installing R packages)
repro(creating reproducible environments)
installing("installing | upgrading R")

start --> packages --> repro --> installing --> start
```

If you go all in on the project-oriented workflow, installing R and upgrading R are the same operation.
